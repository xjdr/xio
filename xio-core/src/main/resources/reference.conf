xio {

  // default values for application limits
  applicationLimits {
    // maximum number of connections across all servers in the application
    maxConnections = 15000
  }

  clientLimits {
    clientPoolSize = 10
  }

  // default values for server limits
  serverLimits {
    // maximum number of connections for a single server instance
    maxConnections = 500
    // maximum frame size per connection
    maxFrameSize = 9600
    // triggered when no read was performed for the specified period of time. Specify 0 to disable.
    maxReadIdleTime = 60seconds
    // triggered when no write was performed for the specified period of time. Specify 0 to disable.
    maxWriteIdleTime = 60seconds
    // triggered when neither read nor write was performed for the specified period of time. Specify 0 to disable.
    maxAllIdleTime = 60seconds

    // global rate limiter
    globalHardReqPerSec = 15000
    globalSoftReqPerSec = 10000

    // pool size should be approximately the same number of unique clients expected during a steady state condition
    rateLimiterPoolSize = 24

    // this is the per server rate limiter
    softReqPerSec = 500.0
    hardReqPerSec = 550.0

    // override rate limiter for a single client. this does not impact the global rate limiter
    // syntax is  [{ <ip> : "<soft_limit>:<hard limit> }]
    // note: this currently does nothing until ServiceRateLimiter is (enabled) added to the pipeline
    reqPerSecondOverride = [
      {"127.0.0.1" : "500:550" }
    ]
  }

  // default values for application settings
  applicationSettings {
    // location of the zookeeper cluster DEPRECATED
    zookeeperCluster = ""
    zookeeper {
      // location of the zookeeper cluster
      cluster = "localhost:2181"
      client {
        retry {
          // zookeeper client retry policy
          policy = RetryOneTime
          // policy must match one of the following sections:
          BoundedExponentialBackoffRetry {
            // see: https://curator.apache.org/apidocs/org/apache/curator/retry/BoundedExponentialBackoffRetry.html
            baseSleepDuration = 2seconds
            maxSleepDuration = 10seconds
            maxRetries = 10
          }
          ExponentialBackoffRetry {
            // https://curator.apache.org/apidocs/org/apache/curator/retry/ExponentialBackoffRetry.html
            baseSleepDuration = 2seconds
            maxRetries = 10
          }
          RetryForever {
            // https://curator.apache.org/apidocs/org/apache/curator/retry/RetryForever.html
            sleepDuration = 2seconds
          }
          RetryNTimes {
            // https://curator.apache.org/apidocs/org/apache/curator/retry/RetryNTimes.html
            n = 10
            sleepDuration = 2seconds
          }
          RetryOneTime {
            // https://curator.apache.org/apidocs/org/apache/curator/retry/RetryOneTime.html
            sleepDuration = 2seconds
          }
          RetryUntilElapsed {
            // https://curator.apache.org/apidocs/org/apache/curator/retry/RetryUntilElapsed.html
            maxElapsedDuration = 10seconds
            sleepDuration = 2seconds
          }
        }
      }
    }
    // number of boss threads to create
    bossThreads = 5
    // boss thread name format
    bossNameFormat = "xio-application-boss-%d"
    // number of worker threads to create
    workerThreads = 10
    // worker thread name format
    workerNameFormat = "xio-application-worker-%d"
    // global rate limiter
    global_soft_req_per_sec = 700.0
    global_hard_req_per_sec = 750.0
    // per server rate limiter
    soft_req_per_sec = 500.0
    hard_req_per_sec = 550.0
    // pool size should be approximate to the number of unique clients expected during a steady state condition
    rate_limiter_pool_size = 24
    // settings for dynamic configuration manager
    configurationManager {
      ipFilter {
        // path to monitor for ip filter rules
        path = "/xio/ipFilterRules"
      }
      http1Filter {
        // path to monitor for http filter rules
        path = "/xio/http1FilterRules"
      }
    }
    // settings for configuration update server
    configurationUpdateServer {
      // update server is disabled by default
      enabled = false
      // update server is bound to port 9999 on loopback by default
      bindIp = 127.0.0.1
      bindPort = 9999
      // update server will coalesce changes and persist them every 5 seconds by default
      writeInterval = 5seconds
    }
    // settings for muxing client
    requestMuxer {
      messagesPerBatch = 100
      drainMessageQInterval = 1millisecond
      multiplierIncrementInterval = 500milliseconds
      multiplierDecrementInterval = 750milliseconds
      rebuildConnectionLoopInterval = 250milliseconds
    }
    tracing {
      type = "ZIPKIN"
      zipkin {
        zipkinUrl = ""
        samplingRate = "1.0"
      }
    }
  }

  serverSettings {
    // servers bind to port 80 on loopback by default
    bindIp = 127.0.0.1
    bindPort = 80
    // DEPRECATED
    // TODO(CK): deprecate and remove
    bossThreads = 5
    // DEPRECATED
    // TODO(CK): deprecate and remove
    workerThreads = 10
    // xio message logger is enabled by default
    messageLoggerEnabled = true
    // load self signed cert by default
    tls {
      include classpath("tls-reference.conf")
    }
  }

  applicationTemplate {
    // application name defaults to blank
    name = ""
    limits = ${xio.applicationLimits}
    settings = ${xio.applicationSettings}
    clientLimits = ${xio.clientLimits}
    servers {
    }
    clients {
    }
  }

  serverTemplate {
    // server name defaults to blank
    name = ""

    limits = ${xio.serverLimits}
    settings = ${xio.serverSettings}

    // enable ip black list
    enableBlackList = false

    // enable ip white list
    enableWhiteList = false
  }

  clientTemplate {
    name = ""
    limits = ${xio.clientLimits}
    remoteIp = ""
    remotePort = 0
    localIp = ""
    localPort = 0
    idleTimeoutEnabled = false
    idleTimeoutDuration = 0
    settings {
      messageLoggerEnabled = true
      tls {
        include classpath("tls-reference.conf")
        privateKeyPath = "classpath:xio-default-client-private-key-pkcs8.pem"
        x509CertPath = "classpath:xio-default-client-certificate-x509.pem"
      }
    }
  }

  routeTemplate {
    methods = []
    host = ""
    path = "/"
    permissionNeeded = "*"
  }

  proxyRouteTemplate = ${xio.routeTemplate} {
    proxyHostPolicy = "UseRequestHeader"
    proxyHost = ""
    proxyPath = "/"
    clients = []
  }

  defaultApplication = ${xio.applicationTemplate} {
    name = "defaultApplication"
  }

  defaultRoute = ${xio.routeTemplate} {
    path = "/"
  }
}
