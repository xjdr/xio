plugins {
  id 'java-library'
  id 'com.google.protobuf' version '0.8.5'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'jacoco'
  id 'com.github.sherter.google-java-format' version '0.6'
  id 'com.jfrog.bintray'
}

googleJavaFormat {
  // todo: example should be moved into a separate module
  exclude "src/example/**/*"
  exclude "out/**/*"
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
    html.destination file("${buildDir}/jacocoHtml")
  }
}

description = 'xio'
group = project_group

def nativeClassifier
def osName = System.getProperty('os.name').toLowerCase()

if (osName.contains('win')) {
  nativeClassifier = 'windows-x86_64'
} else if (osName.contains('linux')) {
  nativeClassifier = 'linux-x86_64'
} else if (osName.contains('mac')) {
  nativeClassifier = 'osx-x86_64'
} else {
  throw new InvalidUserDataException("Unsupoprted os family $osName")
}

dependencies {
  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: findbugs_jsr305_version
  api group: 'com.google.guava', name: 'guava', version: guava_version
  api group: 'com.typesafe', name: 'config', version: typesafe_config_version
  api group: 'io.netty', name: 'netty-all', version: netty_version
  implementation group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: netty_tcnative_version, classifier: nativeClassifier
  implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
  implementation(group: 'org.apache.curator', name: 'curator-framework', version: curator_version) {
    exclude(module: 'zookeeper')
  }
  implementation(group: 'org.apache.curator', name: 'curator-recipes', version: curator_version) {
    exclude(module: 'zookeeper')
  }
  implementation(group: 'org.apache.zookeeper', name: 'zookeeper', version: zookeeper_version) {
    exclude(module: 'slf4j-log4j12')
    exclude(module: 'log4j')
  }
  implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4j_version
  implementation group: 'org.apache.thrift', name: 'libthrift', version: libthrift_version
  implementation group: 'io.zipkin.brave', name: 'brave-instrumentation-http', version: zipkin_brave_brave_instrumentation_http_version
  implementation group: 'io.zipkin.brave', name: 'brave-context-slf4j', version: zipkin_brave_brave_context_slf4j_version
  implementation group: 'io.zipkin.reporter', name: 'zipkin-sender-okhttp3', version: zipkin_reporter_zipkin_sender_okhttp3_version

  api group: 'com.google.auto.value', name: 'auto-value', version: auto_value_version
  annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: auto_value_version

  api group: 'org.projectlombok', name: 'lombok', version: lombok_version
  annotationProcessor "org.projectlombok:lombok:$lombok_version"

  implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: metrics_version
  implementation group: 'io.dropwizard.metrics', name: 'metrics-jmx', version: metrics_version

  //region tests
  testCompile project(':xio-test')
  testCompile group: 'junit', name: 'junit', version: junit_version
  testCompile group: 'net.jodah', name: 'concurrentunit', version: concurrentunit_version
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrest_version
  testCompile group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4j_version
  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
  testCompile group: 'ch.qos.logback', name: 'logback-core', version: logback_version
  testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovy_version
  testCompile(group: 'org.apache.curator', name: 'curator-test', version: curator_test_version) {
    exclude(module: 'zookeeper')
  }
  testCompile group: 'io.zipkin.brave', name: 'brave-instrumentation-http-tests', version: zipkin_brave_brave_instrumentation_http_version
  testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: eclipse_jetty_server_version
  testCompile(group: 'org.mockito', name: 'mockito-core', version: mockito_version)
  testCompile(group: 'org.powermock', name: 'powermock-core', version: powermock_version)
  testCompile(group: 'org.powermock', name: 'powermock-module-junit4', version: powermock_version)
  testCompile(group: 'org.powermock', name: 'powermock-api-mockito2', version: powermock_version)
  testCompile group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: eclipse_jdt_core_compiler_ecj_version
  testCompile group: 'io.grpc', name: 'grpc-core', version: grpc_version
  testCompile(group: 'io.grpc', name: 'grpc-netty', version: grpc_version) {
    exclude(module: 'grpc-core')
    exclude(module: 'netty-codec-http2')
  }
  testCompile group: 'io.grpc', name: 'grpc-protobuf', version: grpc_version
  testCompile group: 'io.grpc', name: 'grpc-stub', version: grpc_version
  testCompile group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: alpn_boot_version
}

def alpn_boot_jar = project.configurations.testCompile.find { it.name.startsWith("alpn-boot-") }

test {
  // https://github.com/square/okhttp/wiki/Building#desktop-testing-with-maven
  jvmArgs = ["-Xbootclasspath/p:$alpn_boot_jar"]
  testLogging {
    showStandardStreams = true
  }
}

task("showAlpnBootJar") {
  println "-Xbootclasspath/p$alpn_boot_jar"
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.5.1-1'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

sourceSets {
  test {
    java {
      srcDirs += 'build/generated/source/proto/test/grpc'
      srcDirs += 'build/generated/source/proto/test/java'
    }
    proto {
      // In addition to the default 'src/test/proto'
      srcDir 'src/test/proto'
    }
  }
}

bintray_package = 'xio'
publishing {
  publications {
    maven(MavenPublication) {
      groupId project_group
      artifactId bintray_package
      version version
      from components.java
    }
  }
}

bintray {
  user = bintray_user //this usually comes from gradle.properties file in ~/.gradle
  key = bintray_apikey //this usually comes from gradle.properties file in ~/.gradle
  publications = ['maven'] //this refers to publishing.publications.maven up above ^^^
  dryRun = bintray_dryrun.toBoolean() //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    userOrg = bintray_subject
    repo = bintray_repo
    name = bintray_package
    version {
      name = project.version //Bintray logical version name
    }
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/xjdr/xio'
    issueTrackerUrl = 'https://github.com/xjdr/xio/issues'
    vcsUrl = 'https://github.com/xjdr/xio.git'
  }
}
